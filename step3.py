"""
3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список. К
ласс-исключение должен контролировать типы данных элементов списка.
Примечание: длина списка не фиксирована.
Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
При этом скрипт завершается, сформированный список выводится на экран.
Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список, т
олько если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и
отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.
"""


class MyError:
    def __init__(self):
        self.numbers_list = []

    def return_input(self):
        decision = input('Вы ошиблись, попробовать еще раз? (ДА/НЕТ):').format().lower()
        if decision == 'да':
            self.user_input()
        else:
            print('Вы выбрали НЕТ, программа закрыта ')
            print(f'Текущий список - {self.numbers_list}')
            exit(0)

    def user_input(self):
        while True:
            try:
                user_text = int(input('Введите число, оно будет добавлена в список: '))
                self.numbers_list.append(user_text)
                print(f'Ваш сформированный список {self.numbers_list}')
            except:
                self.return_input()


err = MyError()
print(err.user_input())
